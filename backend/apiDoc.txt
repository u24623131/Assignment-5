==================================================================
                 WORKING WITH SATOSHI NAKAMOTO API
==================================================================

============================= SETUP ==============================
-> Only POST requests allowed
-> MUST HAVE .env FILE (Available on Discord)
	--> if file name is not .env (e.g. "env") rename and add a . 
	    to the name (e.g.".env")
-> Install Composer: https://getcomposer.org/download/
-> After Composer is installed, run in terminal:

       composer require vlucas/phpdotenv

==================================================================
                        REQUESTS
==================================================================

========================= REGISTRATION ===========================

Required Fields:
  - type         : "Register"
  - Name         : First name
  - Surname      : Surname
  - Email        : Valid email address
  - Password     : Minimum 8 characters; must include:
                     * Uppercase & lowercase letters
                     * Numbers
                     * Symbols
  - User_Type    : "admin" or "normal"

Optional Field:
  - Cell_No      : 10-digit phone number

------------------ REQUEST EXAMPLE 1 ------------------

{
  "type": "Register",
  "Name": "TestName2",
  "Surname": "TestSurname2",
  "Email": "testemail2@test.com",
  "Password": "test1P@ssword",
  "User_Type": "normal",
  "Cell_No": "0123456789"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747763875493,
  "data": {
    "message": "TestName2 was added",
    "apiKey": "0ce38b841cd526f2b18b9707aed7f772"
  }
}

------------------- ERROR RESPONSE -------------------

{
  "status": "error",
  "timestamp": 1747766654058,
  "data": "Email was already used"
}

------------------ REQUEST EXAMPLE 2 ------------------

{
  "type": "Register",
  "Name": "TestName",
  "Surname": "TestSurname",
  "Email": "testemail@test.com",
  "Password": "test1P@ssword",
  "User_Type": "normal"
}

==================================================================
                          LOGIN
==================================================================

Required Fields:
  - type     : "Login"
  - Email    : Registered email address
  - Password : Associated password

------------------ REQUEST EXAMPLE ------------------

{
  "type": "Login",
  "Email": "testemail2@test.com",
  "Password": "test1P@ssword"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": {
    "API_Key": "0ce38b841cd526f2b18b9707aed7f772"
  }
}

------------------- ERROR RESPONSE -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "Incorrect password."
}

==================================================================
                         DELETE ACCOUNT
==================================================================

Required Fields:
  - type       : "DeleteAccount"
  - API_Key    : Valid API key (from login or registration)

------------------ REQUEST EXAMPLE ------------------

{
  "type": "DeleteAccount",
  "API_Key": "0ce38b841cd526f2b18b9707aed7f772"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747771234567,
  "data": "User was deleted"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747772345678,
  "data": "User not found, cannot delete"
}

==================================================================
                      GET ALL PRODUCTS
==================================================================

Required Fields:
  - type     : "GetAllProducts"

------------------ REQUEST EXAMPLE ------------------

{
  "type": "GetAllProducts"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": {
    "Products": [
      {
        "Product_No": 1,
        "Title": "Product 1",
        "Category": "Category 1",
        "Description": "Description 1",
        "Brand": "Brand 1",
        "Image_URL": "image1.jpg",
        "Retailer_Names": ["Checkers", "Pick n Pay"],
        "Prices": ["23.45", "25.60"]
      },
      {
        "Product_No": 2,
        "Title": "Product 2",
        "Category": "Category 2",
        "Description": "Description 2",
        "Brand": "Brand 2",
        "Image_URL": "image2.jpg",
        "Retailer_Names": ["Woolworths"],
        "Prices": ["29.99"]
      }
    ]
  }
}

------------------- ERROR RESPONSE -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "Query failed in getAllProducts"
}

==================================================================
                      PRODUCT BY RETAILER
==================================================================

Required Fields:
  - type        : "ProductByRetailer"
  - retailer    : Retailer ID
  - productNum  : Product number

------------------ REQUEST EXAMPLE ------------------

{
  "type": "ProductByRetailer",
  "retailer": 1,
  "productNum": 5
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": {
    "ProductNo": 5,
    "Title": "Product 5",
    "Category": "Category 5",
    "Description": "Description 5",
    "Brand": "Brand 5",
    "ImageUrl": "image5.jpg",
    "Price": 19.99
  }
}

------------------- ERROR RESPONSE -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "Could not get price of desired item"
}

==================================================================
                      PRODUCTS BY CUSTOMER ID
==================================================================

Required Fields:
  - type        : "ProductsByCustomerId"
  - customerID  : Customer ID

Note: This endpoint appears to be incomplete in the implementation.

------------------ REQUEST EXAMPLE ------------------

{
  "type": "ProductsByCustomerId",
  "customerID": 123
}

==================================================================
                      ADD TO FAVOURITES
==================================================================

Required Fields:
  - type        : "AddToFavourite"
  - apiKey      : Valid API key
  - Product_Name  : Name of product to add

------------------ REQUEST EXAMPLE ------------------

{
  "type": "AddToFavourite",
  "apiKey": "0ce38b841cd526f2b18b9707aed7f772",
  "Product_Name": "Oreo"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": "Product added to favourites"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "apiKey is missing"
}

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "User not found"
}

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "Product not found"
}

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "This product is already in your favourites."
}

==================================================================
                      GET USER FAVOURITES
==================================================================

Required Fields:
  - type       : "GetUserFavourite"
  - apikey     : Valid API key

------------------ REQUEST EXAMPLE ------------------

{
  "type": "GetUserFavourite",
  "apikey": "0ce38b841cd526f2b18b9707aed7f772"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": [
    {
      "Product_No": 1,
      "Title": "Product 1",
      "Category": "Category 1",
      "Description": "Description 1",
      "Brand": "Brand 1",
      "Image_URL": "image1.jpg",
      "Retailer_Names": ["Retailer A", "Retailer B"],
      "Prices": [9.99, 10.49]
    },
    {
      "Product_No": 5,
      "Title": "Product 5",
      "Category": "Category 5",
      "Description": "Description 5",
      "Brand": "Brand 5",
      "Image_URL": "image5.jpg",
      "Retailer_Names": ["Retailer C"],
      "Prices": [15.99]
    }
  ]
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "apikey is missing"
}

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "User not found"
}

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "Query execution failed"
}


==================================================================
                          ADD PRODUCT
==================================================================

Required Fields:
  - type        : "addProduct"
  - apikey      : Valid admin API key
  - Title       : Product title
  - Category    : Product category
  - Description : Product description
  - Brand       : Product brand
  - Image_URL   : URL to product image
  - Retailers   : Array of retailer names
  - Prices      : Array of corresponding prices (float)

------------------ REQUEST EXAMPLE ------------------

{
  "type": "addProduct",
  "apikey": "admin_api_key_here",
  "Title": "Product X",
  "Category": "Electronics",
  "Description": "Latest gadget",
  "Brand": "BrandX",
  "Image_URL": "imagex.jpg",
  "Retailers": ["Retailer1", "Retailer2"],
  "Prices": [199.99, 189.99]
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747767000000,
  "data": "product(s) & prices added"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747767000001,
  "data": "Title is Missing"
}

{
  "status": "error",
  "timestamp": 1747767000002,
  "data": "User is not an admin"
}

==================================================================
                     UPDATE PRODUCT PRICES
==================================================================

Required Fields:
  - type        : "updateProductPrice"
  - apikey      : Valid admin API key
  - productTitle: Title of the product
  - retailer    : Name of the retailer
  - newPrice    : New price to be updated

------------------ REQUEST EXAMPLE ------------------

{
  "type": "updateProductPrice",
  "apikey": "admin_api_key_here",
  "productTitle": "Product X",
  "retailer": "Retailer1",
  "newPrice": 179.99
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747767000003,
  "data": "Product price has been updated: 179.99"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747767000004,
  "data": "Product does not exist"
}

==================================================================
                       DELETE PRODUCT
==================================================================

Required Fields:
  - type        : "deleteProduct"
  - apikey      : Valid admin API key
  - productTitle: Title of the product to delete

------------------ REQUEST EXAMPLE ------------------

{
  "type": "deleteProduct",
  "apikey": "admin_api_key_here",
  "productTitle": "Product X"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747767000005,
  "data": {
    "message": "Product Product X has been deleted."
  }
}

==================================================================
                     ADD PRODUCT REVIEW
==================================================================

Required Fields:
  - type   : "addReview"
  - apikey : Valid user API key
  - Title  : Product title
  - Rating : Integer (0 to 5)
  - Review : Sentence

------------------ REQUEST EXAMPLE ------------------

{
  "type": "addReview",
  "apikey": "user_api_key_here",
  "Title": "Product X",
  "Rating": 4,
  "Review": "Cool"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747767000006,
  "data": "Review was inserted"
}

==================================================================
                    REMOVE PRODUCT REVIEW
==================================================================

Required Fields:
  - type       : "removeReview"
  - apikey     : API key of requester (user or admin)
  - Title      : Product title
  - userapikey : [ONLY FOR ADMIN] Target user's API key

------------------ REQUEST EXAMPLE (User) ------------------

{
  "type": "removeReview",
  "apikey": "user_api_key_here",
  "Title": "Product X"
}

------------------ REQUEST EXAMPLE (Admin) ------------------

{
  "type": "removeReview",
  "apikey": "admin_api_key_here",
  "Title": "Product X",
  "userapikey": "user_api_key_here"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747767000007,
  "data": "Removed user's review"
}

==================================================================
                      GET USER FAVOURITES
==================================================================

Required Fields:
  - type   : "getUserFavourite"
  - apiKey : Valid API key

------------------ REQUEST EXAMPLE ------------------

{
  "type": "getUserFavourite",
  "apiKey": "0ce38b841cd526f2b18b9707aed7f772"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": [
    {
      "Product_No": 1,
      "Title": "Product 1",
      "Category": "Category 1",
      "Description": "Description 1",
      "Brand": "Brand 1",
      "Image_UTL": "image1.jpg"
    },
    {
      "Product_No": 5,
      "Title": "Product 5",
      "Category": "Category 5",
      "Description": "Description 5",
      "Brand": "Brand 5",
      "Image_UTL": "image5.jpg"
    }
  ]
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "apiKey is missing"
}
==================================================================
                      PRODUCT COMPARISON
==================================================================

Required Fields:
  - type          : "productCompare"
  - apiKey        : Valid API key
  - productTitle1 : Title of the first product to compare
  - productTitle2 : Title of the second product to compare

------------------ REQUEST EXAMPLE ------------------

{
  "type": "productCompare",
  "apiKey": "0ce38b841cd526f2b18b9707aed7f772",
  "productTitle1": "Product A",
  "productTitle2": "Product B"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747766939157,
  "data": {
    "product1": {
      "Product_No": 2,
      "Title": "Product A",
      "Category": "Category A",
      "Description": "Description A",
      "Brand": "Brand A",
      "Image_URL": "productA.jpg",
      "Prices": [
        {
          "Retailer": "Retailer 1",
          "Price": 99.99
        },
        {
          "Retailer": "Retailer 2",
          "Price": 94.50
        }
      ]
    },
    "product2": {
      "Product_No": 7,
      "Title": "Product B",
      "Category": "Category B",
      "Description": "Description B",
      "Brand": "Brand B",
      "Image_URL": "productB.jpg",
      "Prices": [
        {
          "Retailer": "Retailer 3",
          "Price": 109.95
        },
        {
          "Retailer": "Retailer 4",
          "Price": 105.00
        }
      ]
    }
  }
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747767153738,
  "data": "apiKey is required"
}

{
  "status": "error",
  "timestamp": 1747767153742,
  "data": "productTitle1 is required"
}

{
  "status": "error",
  "timestamp": 1747767153746,
  "data": "productTitle2 is required"
}
==================================================================
                             SEARCH
==================================================================

Required Fields:
  - type     : "Search"
  - apikey   : Valid API key
  - search   : Object with one or more of the following fields:
                 • Title
                 • Category
                 • Description
                 • Brand

Optional Field:
  - limit    : (Currently Ignored) — May be supported in future versions

Notes:
  - Partial matches are supported (e.g. "Dron" matches "Drone")
  - All fields in `search` must be strings
  - Returns full product details and groups all retailer prices and names

------------------ REQUEST EXAMPLE ------------------

{
  "type": "Search",
  "apikey": "youalreadyknowfakeapikey",
  "search": {
    "Title": "Drone",
    "Brand": "DJI"
  }
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777000,
  "data": {
    "Products": [
      {
        "Product_No": 3,
        "Title": "DJI Mini Drone",
        "Category": "Electronics",
        "Description": "Compact and lightweight drone",
        "Brand": "DJI",
        "Image_URL": "minidrone.jpg",
        "Retailer_Names": ["BestBuy", "TechWorld"],
        "Prices": [499.99, 479.99]
      },
      ...
    ]
  }
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is missing"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "Invalid API key"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "search is missing"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "search must be an array"
}

{
  "status": "error",
  "timestamp": 1747778888004,
  "data": "Invalid column name 'Price'. Valid columns: Title, Category, Description, Brand"
}

{
  "status": "error",
  "timestamp": 1747778888005,
  "data": "Could not prepare SQL statement"
}


==================================================================
                      GET USER DETAILS
==================================================================

Required Fields:
  - type     : "GetUserDetails"
  - apikey   : Valid API key

------------------ REQUEST EXAMPLE ------------------

{
  "type": "GetUserDetails",
  "apikey": "0ce38b841cd526f2b18b9707aed7f772"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777000,
  "data": {
    "User_ID": 12,
    "Name": "John",
    "Surname": "Doe",
    "Email": "john.doe@example.com",
    "Cell_No": "0821234567"
  }
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is missing"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "apikey is not valid"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "Failed to fetch user data"
}

==================================================================
                     UPDATE USER DETAILS
==================================================================

Required Fields:
  - type     : "UpdateUserDetails"
  - apikey   : Valid API key

Optional Fields (at least one required):
  - name     : New name
  - surname  : New surname
  - email    : New email (must not be in use)
  - cell_no  : New cellphone number (must be valid)
  - password : New password (must be strong)

------------------ REQUEST EXAMPLE ------------------

{
  "type": "UpdateUserDetails",
  "apikey": "0ce38b841cd526f2b18b9707aed7f772",
  "name": "Jane",
  "surname": "Smith",
  "email": "jane.smith@example.com",
  "cell_no": "0839876543",
  "password": "SecurePass1!"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777000,
  "data": "User details updated successfully"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is missing"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "apikey is not valid"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "No fields to update"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "Email is already used"
}

{
  "status": "error",
  "timestamp": 1747778888004,
  "data": "Invalid Cellphone number"
}

{
  "status": "error",
  "timestamp": 1747778888005,
  "data": "Password must be at least 8 characters long, include uppercase and lowercase letters, a number, and a symbol."
}
==================================================================
                    REMOVE FROM FAVOURITE
==================================================================

Required Fields:
  - type   : "RemoveFromFavourite"
  - apikey : Valid API key
  - Title  : Product title

------------------ REQUEST EXAMPLE ------------------

{
  "type": "RemoveFromFavourite",
  "apikey": "766d4969d53b80ae446ef13d892736f1",
  "Title": "Wireless Bluetooth Earbuds"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747947537221,
  "data": "Product removed from favourites"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747947537999,
  "data": "apikey is Missing"
}

{
  "status": "error",
  "timestamp": 1747947538001,
  "data": "Title is Missing"
}

{
  "status": "error",
  "timestamp": 1747947538002,
  "data": "Invalid API Key"
}

{
  "status": "error",
  "timestamp": 1747947538003,
  "data": "Product not found"
}

{
  "status": "error",
  "timestamp": 1747947538004,
  "data": "User did not add product to favourites"
}

{
  "status": "error",
  "timestamp": 1747947538005,
  "data": "Failed to prepare statement"
}

{
  "status": "error",
  "timestamp": 1747947538006,
  "data": "Failed to delete favourite"
}
==================================================================
                         ADD RETAILER
==================================================================

Required Fields:
  - type         : "AddRetailer"
  - apikey       : Valid API key (must be admin)
  - retailName   : Name of the retailer

Optional Fields:
  - retailAddress : Physical address of the retailer

------------------ REQUEST EXAMPLE ------------------

{
  "type": "AddRetailer",
  "apikey": "adminapikey1234567890",
  "retailName": "TechWorld",
  "retailAddress": "123 Market Street, Cape Town"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747948000000,
  "data": "Retailer added successfully"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747948001000,
  "data": "apikey is Missing"
}

{
  "status": "error",
  "timestamp": 1747948001001,
  "data": "User is not an admin"
}

{
  "status": "error",
  "timestamp": 1747948001002,
  "data": "retailName is Missing"
}

{
  "status": "error",
  "timestamp": 1747948001003,
  "data": "Retailer already exists"
}

{
  "status": "error",
  "timestamp": 1747948001004,
  "data": "Could not prepare insert statement"
}

{
  "status": "error",
  "timestamp": 1747948001005,
  "data": "Failed to insert retailer"
}
==================================================================
                         UPDATE RETAILER
==================================================================

Required Fields:
  - type         : "UpdateRetailer"
  - apikey       : Valid API key (must be admin)
  - retailName   : Current name of the retailer

Optional Fields (at least one required to update):
  - newRetailName : New name of the retailer
  - retailAddress : New physical address of the retailer

------------------ REQUEST EXAMPLE ------------------

{
  "type": "UpdateRetailer",
  "apikey": "adminapikey1234567890",
  "retailName": "TechWorld",
  "newRetailName": "TechPlanet",
  "retailAddress": "456 Innovation Road, Joburg"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747948000000,
  "data": "Retailer updated successfully"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747948002000,
  "data": "apikey is Missing"
}

{
  "status": "error",
  "timestamp": 1747948002001,
  "data": "User is not an admin"
}

{
  "status": "error",
  "timestamp": 1747948002002,
  "data": "retailName is Missing"
}

{
  "status": "error",
  "timestamp": 1747948002003,
  "data": "Retailer does not exist"
}

{
  "status": "error",
  "timestamp": 1747948002004,
  "data": "Could not prepare update statement"
}

{
  "status": "error",
  "timestamp": 1747948002005,
  "data": "Failed to update retailer"
}

==================================================================
                        MAKE USER ADMIN
==================================================================

Required Fields:
  - type        : "MakeUserAdmin"
  - adminkey    : API key of the admin making the request
  - targetkey   : API key of the user to be promoted

------------------ REQUEST EXAMPLE ------------------

{
  "type": "MakeUserAdmin",
  "adminkey": "adminapikey1234567890",
  "targetkey": "userapikey0987654321"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747948000000,
  "data": "Target is now an admin"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747948001000,
  "data": "adminkey is Missing"
}

{
  "status": "error",
  "timestamp": 1747948001001,
  "data": "targetkey is Missing"
}

{
  "status": "error",
  "timestamp": 1747948001002,
  "data": "Admin key is not recognised as a valid key"
}

{
  "status": "error",
  "timestamp": 1747948001003,
  "data": "Non-admin user may not make users admin"
}

{
  "status": "error",
  "timestamp": 1747948001004,
  "data": "Target key is not recognised as a valid key"
}

{
  "status": "error",
  "timestamp": 1747948001005,
  "data": "Target key is already an Admin"
}

{
  "status": "error",
  "timestamp": 1747948001006,
  "data": "Could not prepare update statement"
}

{
  "status": "error",
  "timestamp": 1747948001007,
  "data": "Failed to make target an admin"
}
==================================================================
                          FILTER PRODUCTS
==================================================================

Required Fields:
  - type     : "Filter"
  - apikey   : Valid API key
  - filter   : Object containing one or more of the following keys

Optional Filter Keys (can be combined):
  - All            : Return all products (ignores other filters)
  - byTitle        : Filter by product title
  - byCategory     : Filter by category name
  - byDescription  : Filter by exact description
  - byBrand        : Filter by brand name
  - byRetailer     : Filter by retailer name

------------------ REQUEST EXAMPLE ------------------

{
  "type": "Filter",
  "apikey": "userapikey1234567890",
  "filter": {
    "byCategory": "Electronics",
    "byBrand": "TechNova"
  }
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747948000000,
  "data": [
    {
      "Product_No": 1,
      "Title": "Smartphone",
      "Description": "Latest 5G phone",
      "Brand": "TechNova",
      "Category": "Electronics",
      "Price": 999.99
    },
    ...
  ]
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747948002000,
  "data": "apikey is required"
}

{
  "status": "error",
  "timestamp": 1747948002001,
  "data": "filter is required"
}

{
  "status": "error",
  "timestamp": 1747948002002,
  "data": "No result matches the filter"
}

{
  "status": "error",
  "timestamp": 1747948002003,
  "data": {
    "message": "Database error occured. Please try again later"
  }
}
==================================================================
                        GET PRODUCT REVIEWS
==================================================================

Required Fields:
  - type   : "GetProductReviews"
  - Title  : Exact title of the product to fetch reviews for

------------------ REQUEST EXAMPLE ------------------

{
  "type": "GetProductReviews",
  "Title": "SuperWidget 3000"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747948000000,
  "data": [
    {
      "Review_ID": 1,
      "Prod_ID": 12,
      "User_ID": 5,
      "User_Name": "Jane Doe",
      "Rating": 4,
      "Comment": "Very good product!",
      "Review_Date": "2025-05-26"
    },
    {
      "Review_ID": 2,
      "Prod_ID": 12,
      "User_ID": 8,
      "User_Name": "John Smith",
      "Rating": 5,
      "Comment": "Exceeded expectations!",
      "Review_Date": "2025-05-24"
    }
  ]
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747948001000,
  "data": "Title is Missing"
}

{
  "status": "error",
  "timestamp": 1747948001001,
  "data": "Product not found"
}
==================================================================
                      ADD TO Review
==================================================================

Required Fields:
  - type        : "AddReview"
  - apiKey      : Valid API key
  - Title  : Name of product to add
  - Rating: Between 0 and 5,
  - Review: text

------------------ REQUEST EXAMPLE ------------------

{
  "type": "AddReview",
  "apiKey": "0ce38b841cd526f2b18b9707aed7f772",
  "Title": "Oreo",
  "Rating": 5,
  "Review": "yummy"
}

------------------ SUCCESS RESPONSE ------------------
"Review was inserted
==================================================================
                        CHANGE PASSWORD
==================================================================

Required Fields:
  - type         : "ChangePassword"
  - apikey       : Valid API key
  - oldPassword  : Current password of the user
  - newPassword  : New password (must meet security requirements)

Password Requirements:
  - At least 8 characters long
  - Includes uppercase and lowercase letters
  - Contains at least one number and one symbol

Notes:
  - The API key must belong to an authenticated user
  - The old password must match the current one
  - On success, the password is updated using Argon2ID hashing

------------------ REQUEST EXAMPLE ------------------

{
  "type": "ChangePassword",
  "apikey": "youalreadyknowfakeapikey",
  "oldPassword": "OldPass123!",
  "newPassword": "NewStrongPass@456"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777999,
  "data": "Password changed successfully"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is required"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "oldPassword is required"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "newPassword is required"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747778888004,
  "data": "Incorrect password."
}

{
  "status": "error",
  "timestamp": 1747778888005,
  "data": "Password must be at least 8 characters long, include uppercase and lowercase letters, a number, and a symbol."
}

{
  "status": "error",
  "timestamp": 1747778888006,
  "data": "Password change failed"
}

{
  "status": "error",
  "timestamp": 1747778888007,
  "data": "Could not fetch a user with the given apikey"
}
==================================================================
                        GET ALL USERS
==================================================================

Required Fields:
  - type     : "GetAllUsers"
  - apikey   : Valid API key of an admin user

Notes:
  - Only admin users are authorized to access this endpoint
  - Returns a list of all registered users with their email and API key

------------------ REQUEST EXAMPLE ------------------

{
  "type": "GetAllUsers",
  "apikey": "youalreadyknowfakeapikey"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777998,
  "data": [
    {
      "Email": "alice@example.com",
      "API_Key": "apikey123..."
    },
    {
      "Email": "bob@example.com",
      "API_Key": "apikey456..."
    }
    ...
  ]
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is required"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "User is not an admin"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "Could not fetch user data"
}
==================================================================
                      ADMIN DELETE USER
==================================================================

Required Fields:
  - type   : "AdminDeleteUser"
  - apikey : Valid API key of an admin user
  - Email  : Email address of the user to delete

Notes:
  - Only users with admin privileges can delete other users
  - The specified user must already exist in the database

------------------ REQUEST EXAMPLE ------------------

{
  "type": "AdminDeleteUser",
  "apikey": "youalreadyknowfakeapikey",
  "Email": "targetuser@example.com"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777997,
  "data": "User was removed from database"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is Missing"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "email is Missing"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "Not a user in the db"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "Non-Admins may not delete users"
}

{
  "status": "error",
  "timestamp": 1747778888004,
  "data": "User is not found"
}

{
  "status": "error",
  "timestamp": 1747778888005,
  "data": "Failed to prepare statement"
}

{
  "status": "error",
  "timestamp": 1747778888006,
  "data": "Failed to delete from database"
}
==================================================================
                          GET USER XP
==================================================================

Required Fields:
  - type   : "GetUserXP"
  - apikey : Valid API key of the user

Notes:
  - Returns the XP (experience points) of the authenticated user
  - XP is a numeric value stored in the user's profile

------------------ REQUEST EXAMPLE ------------------

{
  "type": "GetUserXP",
  "apikey": "youalreadyknowfakeapikey"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777996,
  "data": {
    "XP": 1200
  }
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": "apikey is Missing"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "apikey is not valid"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "issue with api key"
}
==================================================================
                         ADD USER XP
==================================================================

Required Fields:
  - type   : "AddUserXP"
  - apikey : Valid API key of the user
  - xp     : Positive numeric value of XP to add

Notes:
  - The given XP value is added to the user's current XP
  - XP must be a non-negative number
  - Only valid users can increase their XP

------------------ REQUEST EXAMPLE ------------------

{
  "type": "AddUserXP",
  "apikey": "youalreadyknowfakeapikey",
  "xp": 150
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777995,
  "data": "Congradulations, XP went up by 150"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888000,
  "data": " is Missing"
}

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "xp is Missing"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "xp must be a number"
}

{
  "status": "error",
  "timestamp": 1747778888004,
  "data": "xp must be positive"
}

{
  "status": "error",
  "timestamp": 1747778888005,
  "data": "Could not increase XP :("
}
==================================================================
                    UPDATE PRODUCT DETAILS
==================================================================

Required Fields:
  - type         : "UpdateProductDetails"
  - apikey       : Valid admin API key
  - productTitle : Title of the product to update (must exist)

Optional Fields (any can be provided to update):
  - newTitle       : New title for the product
  - newCategory    : New category
  - newDescription : New description
  - newBrand       : New brand
  - newImageUrl    : Valid URL to the new image

Notes:
  - Product is identified using the current product title
  - Only admin users may update product details
  - If a field is not provided, the current value is kept
  - If newImageUrl is provided, it must be a valid URL

------------------ REQUEST EXAMPLE ------------------

{
  "type": "UpdateProductDetails",
  "apikey": "youalreadyknowfakeapikey",
  "productTitle": "Black Jeans",
  "newTitle": "Dark Black Jeans",
  "newDescription": "Stylish and modern black jeans",
  "newBrand": "UrbanEdge",
  "newImageUrl": "https://example.com/images/blackjeans.png"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747777777995,
  "data": "Product successfully updated"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747778888001,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747778888002,
  "data": "User is not an admin"
}

{
  "status": "error",
  "timestamp": 1747778888003,
  "data": "productTitle is required"
}

{
  "status": "error",
  "timestamp": 1747778888004,
  "data": "Product update failed"
}

{
  "status": "error",
  "timestamp": 1747778888005,
  "data": "Could not fetch product details"
}
==================================================================
                        ADD TO COMPARE
==================================================================

Required Fields:
  - type         : "AddToCompare"
  - apikey       : Valid API key
  - Product_Name : Name of the product to compare (must exist)

Notes:
  - Only authenticated users may add products to compare
  - A user may not add the same product more than once
  - Product names are matched case-sensitively
  - Product must exist in the database

------------------ REQUEST EXAMPLE ------------------

{
  "type": "AddToCompare",
  "apikey": "youalreadyknowfakeapikey",
  "Product_Name": "Dante Hoodie"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747779999111,
  "data": "Product added to Compare"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747780000001,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747780000002,
  "data": "Product_Name is required"
}

{
  "status": "error",
  "timestamp": 1747780000003,
  "data": "User not found"
}

{
  "status": "error",
  "timestamp": 1747780000004,
  "data": "Product not found"
}

{
  "status": "error",
  "timestamp": 1747780000005,
  "data": "This product is already in your compares."
}

{
  "status": "error",
  "timestamp": 1747780000006,
  "data": "Database Error"
}

{
  "status": "error",
  "timestamp": 1747780000007,
  "data": "Failed to check existing compares"
}

{
  "status": "error",
  "timestamp": 1747780000008,
  "data": "Failed to prepare insert statement"
}

{
  "status": "error",
  "timestamp": 1747780000009,
  "data": "Failed to add to Compare"
}
==================================================================
                    REMOVE FROM COMPARE
==================================================================

Required Fields:
  - type         : "RemoveFromCompare"
  - apikey       : Valid API key
  - Product_Name : Name of the product to remove from compare list

Notes:
  - Only authenticated users may remove products from their compare list
  - The product must exist in the user's compare table
  - Product names are matched case-sensitively
  - Product must exist in the Products table

------------------ REQUEST EXAMPLE ------------------

{
  "type": "RemoveFromCompare",
  "apikey": "youalreadyknowfakeapikey",
  "Product_Name": "Dante Hoodie"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747781111222,
  "data": "Product successfully removed from Compare table"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747781111333,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747781111444,
  "data": "Product_Name is required"
}

{
  "status": "error",
  "timestamp": 1747781111555,
  "data": "User not found"
}

{
  "status": "error",
  "timestamp": 1747781111666,
  "data": "Product not found"
}

{
  "status": "error",
  "timestamp": 1747781111777,
  "data": "Database Error"
}

{
  "status": "error",
  "timestamp": 1747781111888,
  "data": "Failed to check existing compares"
}

{
  "status": "error",
  "timestamp": 1747781111999,
  "data": "Failed to prepare delete statement"
}

{
  "status": "error",
  "timestamp": 1747781112000,
  "data": "Failed to delete from Compare"
}

{
  "status": "error",
  "timestamp": 1747781112111,
  "data": "Product not found within the Compare table"
}
==================================================================
                        REMOVE RETAILER
==================================================================

Required Fields:
  - type     : "RemoveRetailer"
  - apikey   : Valid API key belonging to an admin
  - retailer : The name of the retailer to remove

Notes:
  - Only admin users are allowed to remove a retailer
  - Retailers are matched by exact name (case-sensitive)
  - Retailer must already exist in the Retailers table

------------------ REQUEST EXAMPLE ------------------

{
  "type": "RemoveRetailer",
  "apikey": "youalreadyknowfakeapikey",
  "retailer": "GameStop"
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747782222333,
  "data": {
    "message": "Retailer 'GameStop' has been deleted."
  }
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747782222444,
  "data": "apikey is required"
}

{
  "status": "error",
  "timestamp": 1747782222555,
  "data": "retailer is required"
}

{
  "status": "error",
  "timestamp": 1747782222666,
  "data": "User is not an admin"
}

{
  "status": "error",
  "timestamp": 1747782222777,
  "data": {
    "message": "Retailer 'GameStop' not found."
  }
}

{
  "status": "error",
  "timestamp": 1747782222888,
  "data": {
    "message": "Could not delete product: GameStop"
  }
}
==================================================================
                          UPDATE REVIEW
==================================================================

Required Fields:
  - type    : "UpdateReview"
  - apikey  : Valid user API key (admins NOT allowed to update reviews)
  - Title   : The exact product title for which the review exists
  - Rating  : New rating value (integer between 0 and 5)

Notes:
  - Only non-admin users can update their own reviews.
  - User must have previously reviewed the product.
  - Rating must be numeric, between 0 and 5 inclusive.
  - Product must exist in the Products table.

------------------ REQUEST EXAMPLE ------------------

{
  "type": "UpdateReview",
  "apikey": "userapikey123",
  "Title": "Super Cool Widget",
  "Rating": 4
}

------------------ SUCCESS RESPONSE ------------------

{
  "status": "success",
  "timestamp": 1747783333000,
  "data": "Review updated successfully"
}

------------------- ERROR RESPONSES -------------------

{
  "status": "error",
  "timestamp": 1747783333111,
  "data": "apikey is Missing"
}

{
  "status": "error",
  "timestamp": 1747783333222,
  "data": "apikey is invalid"
}

{
  "status": "error",
  "timestamp": 1747783333333,
  "data": "Admins may not Update reviews but they may remove"
}

{
  "status": "error",
  "timestamp": 1747783333444,
  "data": "Title is Empty"
}

{
  "status": "error",
  "timestamp": 1747783333555,
  "data": "Super Cool Widget may not exist"
}

{
  "status": "error",
  "timestamp": 1747783333666,
  "data": "Rating must be a number"
}

{
  "status": "error",
  "timestamp": 1747783333777,
  "data": "You did not review this product"
}

{
  "status": "error",
  "timestamp": 1747783333888,
  "data": "Rating may not be greater than 5"
}

{
  "status": "error",
  "timestamp": 1747783333999,
  "data": "Rating may not be negative"
}

{
  "status": "error",
  "timestamp": 1747783334000,
  "data": "Failed to prepare update query"
}

{
  "status": "error",
  "timestamp": 1747783334111,
  "data": "Failed to update review"
}
